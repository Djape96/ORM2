 ================================================================
// Katedra: Katedra za racunarsku tehniku i racunarske komunikacije
// Predmet: Osnovi racunarskih mreza 2
// Godina studija: III godina
// Semestar: Letnji (VI)
// Skolska godina: 2016/2017
// Datoteka: vezba7.c
// ================================================================

// Include libraries
// We do not want the warnings about the old deprecated and unsecure CRT functions since these examples can be compiled under *nix as well
#ifdef _MSC_VER
	#define _CRT_SECURE_NO_WARNINGS
#else
#include <netinet/in.h>
#include <time.h>
#endif

#include <pcap.h>
#include "protocol_headers.h"
#define PCAP_ERRBUFF_SIZE 1000


int packet_counter = 0;

// Function declarations
void packet_handler(unsigned char *param, const struct pcap_pkthdr *packet_header, const unsigned char *packet_data);
pcap_if_t* select_device(pcap_if_t* devices);

//Print data
void print_raw_data(unsigned char* data, int data_length);

int main()
{
    pcap_if_t* devices;
    pcap_if_t* device;
    pcap_t* device_handle;
    char error_buffer[PCAP_ERRBUFF_SIZE];
    unsigned int netmask;
    struct bpf_program fcode;
    char filter_exp[] = "ether host b9:27:eb:e4:ce:db and (ip and(udp or tcp))";

    int result;
    struct pcap_pkthdr* packet_header;
    const unsigned char* packet_data;

    /*List all devs -> first assignement*/
    if(pcap_findalldevs(&devices, error_buffer)==1)
    {
        printf("Error in pcap_findalldevs: %s\n", error_buffer);
        return -1;
    }

    device = select_device(devices);

    if(device == NULL)
    {
        pcap_freealldevs(devices);
        return -1;
    }

    /*Second assignment*/
    if((device_handle = pcap_open_live(device->name, 65536, 0, 2000, error_buffer))==NULL)
    {
        printf("\nUnable to open the adapter, %s is not supported!\n", device->name);
        pcap_freealldevs(devices);
        return -1;
    }

    /*Third assignment*/
    /*Check link layer ethernet*/
    if(pcap_datalink(device_handle) != DLT_EN10MB)
    {
        printf("\nThis program works only on Ethernet networks!\n");
        return -1;
    }

    /*Fifth assignement*/
    if(pcap_compile(device_handle, &fcode, filter_exp, 1, netmask)<0)
    {
        printf("\n Unable to compile packet filter. Check the syntax!\n");
        return -1;
    }

    if(pcap_setfilter(device_handle, &fcode) < 0)
    {
        printf("\nError setting the filter!\n");
        return -1;
    }

    printf("\nListening on %s...\n", device->description);
    pcap_freealldevs(devices);
    /*Fourth assignment*/
    /*Start packet capture*/
    pcap_loop(device_handle, 5, packet_handler, NULL);


    return 0;
}


/*Choose one of devices from which you want to read data*/
pcap_if_t* select_device(pcap_if_t* devices)
{
    int device_number;
    int i = 0; //count device num nad provide jump to selected device
    pcap_if_t* device; //iterator through device list

    for(device = devices; device; device = device->next)
    {
        printf("%.d %s", ++i, device->name); //print devices in a list
        if(device->description)
        {
            printf(" (%s)\n", device->description);
        }
        else
        {
            printf(" (No device description available!)\n");
        }
    }

    if(i == 0)
    {
        printf("\n No interfaces found!\n");
        return NULL;
    }

    printf("Enter the interface number (1-%d):", i);
    scanf("%d", &device_number);

    if(device_number <1 || device_number > i)
    {
        printf("\nInterface number out of range!\n");
        return NULL;
    }

    for(device = devices, i = 0; i < device_number - 1; device = device->next, i++);

    return device;
}


/*callback func for every incoming package*/
void packet_handler(unsigned char* param, const struct pcap_pkthdr* packet_header, const unsigned char* packet_data)
{
    time_t timestamp;
    struct tm* local_time;
    char time_string[16];
    int i, k;

    timestamp = packet_header->ts.tv_sec;
    local_time = localtime(&timestamp);
    strftime(time_string, sizeof time_string, "%H:%M:%S", local_time);

    printf("\n-----------------------------------------");
    printf("\nPacket (%d): %s, %d byte\n", ++packet_counter, time_string, packet_header->len);
    for(i = 0; i < packet_header->len; i++)
    {
        printf("%.2x ", ++packet_counter, packet_data[i]);
        k++;
        if(k % 16 == 0)
        {
            printf("\n");
       }
    }
}

void print_raw_data(unsigned char* data, int data_length)
{
    int i, k;
    printf("\n-------------------------------------------------\n\t");
    for(i = 0; i < data_length; i++)
    {
        printf("%.2x", ((unsigned char*)data)[i]);
        k++;
        if(k % 16 == 0)
        {
           printf("\n");
        }
    }
    printf("\n-------------------------------------------------\n\t");

}

